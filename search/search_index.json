{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Samhi's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<ul> <li>Primary author: Samhitha Pudipeddi</li> <li>Reviewer: Margot Bohlin</li> </ul>"},{"location":"tutorials/rust-setup/#intro","title":"Intro","text":"<p>In this tutorial, you will create a \"Hello COMP423\" program in Rust by setting up a Dev Container project specifically for Rust. You will also learn how to use Git to manage your code history and share your project.</p>"},{"location":"tutorials/rust-setup/#prerequistes","title":"Prerequistes","text":"<ol> <li>A GitHub account</li> <li>Git installed</li> <li>Visual Studio Code (VS Code)</li> <li>Docker installed</li> </ol>"},{"location":"tutorials/rust-setup/#git-repository-setup","title":"Git Repository Setup","text":""},{"location":"tutorials/rust-setup/#creating-a-local-directory-initalize-git","title":"Creating a Local Directory &amp; Initalize Git","text":"<ol> <li>Open your terminal</li> <li>Create a directory for your project <pre><code>mkdir first-rust-project\ncd first-rust-project\n</code></pre></li> </ol> <p>Note</p> <p>If you want to create this tutorial directory somewhere else on your machine, change into that parent directory first. Otherwise, the tutorial directory will be made in the parent directory.</p> <ol> <li>Initialize a new Git repository <pre><code>git init\n</code></pre></li> <li>Create a README file linking the tutorial page <pre><code>echo \"https://samhipudi.github.io/comp423-course-notes/tutorials/rust-setup/\" &gt; README.md\ngit add README.md\ngit commit -m \"Adding tutorial link to README\"\n</code></pre></li> </ol>"},{"location":"tutorials/rust-setup/#creating-a-remote-repository-on-github","title":"Creating a Remote Repository on GitHub","text":"<ol> <li>Navigate to the Create a New Repository page after logging into GitHub</li> <li>Fill in the details as follows:<ul> <li>Repository Name: first-rust-project</li> <li>Description: \"Following a Rust tutorial.\"</li> <li>Visibility: Public</li> </ul> </li> <li>Click Create Repository</li> </ol>"},{"location":"tutorials/rust-setup/#link-your-local-repository-to-github","title":"Link your Local Repository to GitHub","text":"<ol> <li>Add the GitHub repository as a remote one <pre><code>git remote add origin https://github.com/&lt;your-username&gt;/first-rust-project.git\n</code></pre></li> <li>Rename your default branch name to main if it is not already using the command below <pre><code>git branch -M main\n</code></pre></li> <li>Push your local commits to your GitHub repository <pre><code>git push --set-upstream origin main\n</code></pre></li> </ol>"},{"location":"tutorials/rust-setup/#setting-up-the-development-enviornment","title":"Setting Up the Development Enviornment","text":"<ol> <li>Open the <code>first-rust-project</code> directory in VS Code</li> <li>Install the Dev Containers extension for VS Code</li> <li>Create a <code>.devcontainer</code> directory in the root of your project with the following file inside: <code>.devcontainer/devcontainer.json</code></li> <li> <p>Add the following code into that file: <pre><code>{\n  \"name\": \"First Rust Project\",\n  \"image\": \"mcr.microsoft.com/devcontainers/rust:latest\",\n  \"customizations\": {\n    \"vscode\": {\n      \"settings\": {},\n      \"extensions\": [\"rust-lang.rust-analyzer\"]\n    }\n  }\n}\n</code></pre></p> <p>Note</p> <p>This allows us to define the configuration for our development enviornment. <code>name</code> = Descriptive name for the container. <code>image</code> = The Docker image to use (latest version of a Rust environment). <code>customizations</code> = Installing the rust-analyzer extension to our environment.</p> </li> <li> <p>Reopen the Project in a VSCode Dev Container by pressing <code>Ctrl+Shift+P</code> (<code>Cmd+Shift+P</code> for Macs) and type in \"Dev Containers: Reopen in Container\", and select the option. </p> </li> <li> <p>After the dev continer setup completes, open a new terminal pane within VSCode and run <code>rustc --version</code> to see your dev continer running a recent version of Rust.</p> <p>Success</p> <p>As of January 2025, the latest version is rustc 1.83.0</p> </li> </ol>"},{"location":"tutorials/rust-setup/#creating-a-rust-project","title":"Creating a Rust Project","text":""},{"location":"tutorials/rust-setup/#create-a-new-rust-binary-project","title":"Create a New Rust Binary Project","text":"<ol> <li>In your terminal, run the command: <pre><code>cargo new hello_comp423 --bin --vcs none\n</code></pre></li> <li> <p>Change to the project's directory with the following command: <pre><code>cd hello_comp423\n</code></pre></p> </li> <li> <p>Open the <code>src/main.rs</code> file in the <code>src</code> folder</p> </li> <li>Add the following code to the <code>main.rs</code> file and save: <pre><code>fn main() {\n    println!(\"Hello COMP423\");\n}\n</code></pre></li> </ol>"},{"location":"tutorials/rust-setup/#running-the-project","title":"Running the project","text":""},{"location":"tutorials/rust-setup/#option-1","title":"Option 1:","text":"<p>Step 1: To compile the project run the following command in the terminal: <code>cargo build</code></p> <pre><code>!!! info\n    This command, like the gcc command which compiles C programs into executables (files that a computer's operating system can run), simply compiles the source code into a binary executable file without executing it.\n</code></pre> <p>Step 2: To run the compiled binary file, run the following command in the terminal: <code>./target/debug/hello_comp423</code></p>"},{"location":"tutorials/rust-setup/#option-2","title":"Option 2:","text":"<p>Step 1: Instead of completing the steps in option 1, you can also run the following command in the terminal: <code>cargo run</code>. This command combines both building and running the program. </p> <pre><code>!!! info\n    `cargo build` compiles the project and generates and executable, but does not run it. `cargo run` both compiles and runs the project in one step.\n</code></pre>"},{"location":"tutorials/rust-setup/#pushing-changes-to-github-repository","title":"Pushing Changes to GitHub Repository","text":"<ol> <li>Add and commit your changes with the following commmands: <pre><code>git add .\ngit commit -m \"Hello COMP423 in Rust\"\n</code></pre></li> <li>Push the changes to GitHub: <pre><code>git push origin main\n</code></pre></li> </ol>"},{"location":"tutorials/rust-setup/#conclusion","title":"Conclusion","text":"<p>Congratulations! You have now created your first rust project inside of a dev container!</p>"},{"location":"tutorials/rust-setup/#citations","title":"Citations","text":"<p>Many instructions in this tutorial were written using the following resources:</p> <ul> <li>COMP423 Course Materials: COMP423 Starting a Static Website project with MkDocs</li> <li>Rust Documentation: Documentation Used</li> </ul>"}]}